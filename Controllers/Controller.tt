<#@ template debug="True" hostspecific="True" language="C#" #>
<#@ output extension=".generated.cs"#>
<#@ import namespace="System.Text" #>
<#@ include file="$(ProjectDir)LinqToDB.Templates\LinqToDB.Access.Tools.ttinclude" #>
<#@ include file="$(ProjectDir)LinqToDB.Templates\PluralizationService.ttinclude"  #>
<#@ import namespace="System.Collections.Generic" #>
<#
	/*
		1. Copy this file to a folder where you would like to generate your data model,
		   rename it, and delete .txt extension. For example:

			MyProject
				DataModels
					MyDatabase.tt

		2. Modify the connection settings below to connect to your database.

		3. Add connection string to the web/app.config file:

			<connectionStrings>
				<add name="MyDatabase" providerName="Access" 
					connectionString="Provider=Microsoft.Jet.OLEDB.4.0;Data Source=MyDatabase.mdb;Locale Identifier=1033;Jet OLEDB:Engine Type=5;Persist Security Info=True" />
			</connectionStrings>

		4. To access your database use the following code:

			using (var db = new MyDatabaseDB())
			{
				var q =
					from c in db.Customers
					select c;

				foreach (var c in q)r
					Console.WriteLine(c.ContactName);
			}

		5. See more at https://github.com/linq2db/t4models/blob/master/Templates/ReadMe.LinqToDB.md.
	*/
	LoadAccessMetadata(@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\Dropbox\2-Projects\_Git_Root\InvoiceTracker\0-Database\InvoiceTracker.accdb;Persist Security Info=False");
    GenerateControllerModel();
    
#>

<#+ 

void GenerateControllerModel()
{
	
	if (GenerationEnvironment.Length > 0 && GenerationEnvironment.ToString().Trim().Length == 0)
		GenerationEnvironment.Length = 0;
	WriteComment(this, "---------------------------------------------------------------------------------------------------");
	WriteComment(this, " <auto-generated>");
	WriteComment(this, "    This code was generated by View model template for Invoice Tracker.");
	WriteComment(this, "    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
	WriteComment(this, " </auto-generated>");
	WriteComment(this, "---------------------------------------------------------------------------------------------------");

	WriteLine("using System;");
	WriteLine("using InvoiceTracker.Database;");
	WriteLine("using InvoiceTracker.Views;");
	WriteLine("using System.Linq;");
	WriteLine("using LinqToDB;");
	WriteLine("using System.Collections.Generic;");
	WriteLine("");
	WriteLine("namespace InvoiceTracker.Controllers");
	WriteLine("{");
	PushIndent("	");

	//Controller interface
	WriteLine("public interface IController");
    WriteLine("{");
	PushIndent("	");	
	WriteLine("event EventHandler OnClick;");
	WriteLine("event EventHandler OnDoubleClick;");
	WriteLine("event EventHandler OnHover;");
	WriteLine("event EventHandler OnExit;");
	WriteLine("");
	WriteLine("void Insert();");
	WriteLine("void Update();");
	WriteLine("void Delete();");
	//WriteLine("List<T> Find<T>(Predicate<T> query);");

	PopIndent();
    WriteLine("}");

	//Controller abstract class
	WriteLine("public abstract partial class Controller : IController");
	WriteLine("{");
	PushIndent("	");
	WriteLine("public InvoiceTrackerDB Model { get; private set; }");
	WriteLine("");
	WriteLine("public event EventHandler OnClick;");
	WriteLine("public event EventHandler OnDoubleClick;");
	WriteLine("public event EventHandler OnHover;");
	WriteLine("public event EventHandler OnExit;");
	//WriteLine("public event EventHandler Inserte
	WriteLine("");
	WriteLine("public abstract void Insert();");
	WriteLine("public abstract void Update();");
	WriteLine("public abstract void Delete();");
	//WriteLine("public abstract List<T> Find<T>(Predicate<T> query);");
	WriteLine("");
	WriteLine("public Action<string> ShowErrorMessage;");
	WriteLine("");
	WriteLine("public Controller(InvoiceTrackerDB model)");
	WriteLine("{");
	PushIndent("	");
	WriteLine("this.Model = model;");
	PopIndent();
	WriteLine("}");
	PopIndent();
	WriteLine("}");
	WriteLine("");

    foreach (Table tbl in Tables.Values)
    {
		Write("public partial class {0}", ClassName(tbl.Name));
		Write(" : {0}","Controller");
		WriteLine("");
		WriteLine("{");
		PushIndent("    ");

		//Print Properties
        //foreach (Column col in tbl.Columns.Values)
        //{	
		//	if(col.IsPrimaryKey) continue;	
		//	Write("public {0} {1} ", col.Type, col.Name);
		//	Write("{ get; set; }");			
		//	WriteLine("");
        //}
		//WriteLine("");
		Write("public I{0}View View" ,tbl.Name);
		Write("{ get; private set; }");
		WriteLine("");

		WriteLine("");
		WriteLine("public {0}(I{1}View view, InvoiceTrackerDB model) : base(model)",ClassName(tbl.Name),tbl.Name);
		WriteLine("{");
		PushIndent("	");
		WriteLine("this.View = view;");
		PopIndent();
		WriteLine("}");
		WriteLine("");

		//Override the Insert function
		WriteLine("public override void Insert()");
		WriteLine("{");
		PushIndent("	");		
		WriteLine("var p = (from poco in this.Model.{0} where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();",ToPlural(tbl.Name),tbl.Name.ToLower());
		WriteLine("if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(Get{1}()));",tbl.Name.ToLower(),tbl.Name);
		PopIndent();
		WriteLine("}");
		WriteLine("");
		WriteLine("public static void Insert({0} {1},InvoiceTrackerDB model)",tbl.Name, tbl.Name.ToLower());
		WriteLine("{");
		PushIndent("	");
		WriteLine("var p = (from poco in model.{0} where poco.Id.Equals({1}.Id) select poco).FirstOrDefault();",ToPlural(tbl.Name),tbl.Name.ToLower());
		WriteLine("if (p == null) Convert.ToInt32(model.InsertWithIdentity({0}));",tbl.Name.ToLower());
		PopIndent();
		WriteLine("}");

		//Delete function
		WriteLine("public override void Delete()");
		WriteLine("{");
		PushIndent("	");		
		WriteLine("this.Delete(Get{0}());",tbl.Name);
		PopIndent();
		WriteLine("}");
		WriteLine("");
		WriteLine("public void Delete({0} {1})",tbl.Name, tbl.Name.ToLower());
		WriteLine("{");
		PushIndent("	");
		WriteLine("this.Model.{0}.Where(p => p.Id == View.Id).Delete();",ToPlural(tbl.Name));
		PopIndent();
		WriteLine("}");
		WriteLine("");

		//Update function
		WriteLine("public override void Update()");
		WriteLine("{");
		PushIndent("	");		
		WriteLine("this.Update(Get{0}());",tbl.Name);
		PopIndent();
		WriteLine("}");
		WriteLine("");
		WriteLine("public void Update({0} {1})",tbl.Name, tbl.Name.ToLower());
		WriteLine("{");
		PushIndent("	");
		WriteLine("this.Model.{0}.Where(p => p.Id == View.Id)",ToPlural(tbl.Name));
		foreach (Column col in tbl.Columns.Values)
        {	
			if(tbl.Columns.Values.Last().Equals(col))
			{
				WriteLine("\t.Set(p => p.{0}, View.{0}).Update();",col.Name);
            }
			else
            {
				WriteLine("\t.Set(p => p.{0}, View.{0})",col.Name);
            }
        }
		PopIndent();
		WriteLine("}");
		WriteLine("");

		//Find function
		WriteLine("public List<Database.{0}> Find(Predicate<Database.{0}> query)",tbl.Name);
		WriteLine("{");
		PushIndent("	");		
		WriteLine("List<{0}> {1} = new List<{0}>();",tbl.Name, "pocos");
		WriteLine("foreach({0} {2} in this.Model.{1})",tbl.Name, ToPlural(tbl.Name),"poco");
		WriteLine("{");
		WriteLine("\tif(query({1})) {2}.Add({1});",tbl.Name, "poco","pocos");
		WriteLine("}");
		WriteLine("return {0};", "pocos");
		PopIndent();
		WriteLine("}");
		WriteLine("");

		//Helper function to get POCO.
		WriteLine("");
        WriteLine("{0} Get{0}()", tbl.Name);
		WriteLine("{");
		PushIndent("	");
		WriteLine("{0} poco = new {0}();",tbl.Name);
		foreach (Column col in tbl.Columns.Values)
        {
		WriteLine("poco.{0} = this.View.{0};",col.Name);	 
        }
		WriteLine("return poco;");
		PopIndent();
		WriteLine("}");
		
		PopIndent();
		WriteLine("}");
		WriteLine("");
    }
	PopIndent();
	WriteLine("}");
	
}
#>

<#+
string ClassName(string tblName)
{
	return ToSingular(tblName)+"Controller";
}

void Heading()
{
	if (GenerationEnvironment.Length > 0 && GenerationEnvironment.ToString().Trim().Length == 0)
		GenerationEnvironment.Length = 0;
	WriteComment(this, "---------------------------------------------------------------------------------------------------");
	WriteComment(this, " <auto-generated>");
	WriteComment(this, "    This code was generated by View model template for Invoice Tracker.");
	WriteComment(this, "    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
	WriteComment(this, " </auto-generated>");
	WriteComment(this, "---------------------------------------------------------------------------------------------------");
}




 


#>



