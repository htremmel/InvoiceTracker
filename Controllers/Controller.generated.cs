//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by View model template for Invoice Tracker.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using InvoiceTracker.Database;
using InvoiceTracker.Views;
using System.Linq;
using System.Collections.Generic;

namespace InvoiceTracker.Controllers
{
	public interface IController
	{
		event EventHandler OnClick;
		event EventHandler OnDoubleClick;
		event EventHandler OnHover;
		event EventHandler OnExit;

		void Insert();
		void Update();
		void Delete();
	}
	public abstract partial class Controller : IController
	{
		public InvoiceTrackerDB Model { get; private set; }

		public event EventHandler OnClick;
		public event EventHandler OnDoubleClick;
		public event EventHandler OnHover;
		public event EventHandler OnExit;

		public abstract void Insert();
		public abstract void Update();
		public abstract void Delete();

		public Action<string> ShowErrorMessage;

		public Controller(InvoiceTrackerDB model)
		{
			this.Model = model;
		}
	}

	public partial class ActorController : Controller
	{
	    public IActorView View{ get; private set; }

	    public ActorController(IActorView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Actors where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetActor()));
	    }

	    public static void Insert(Actor actor,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Actors where poco.Id.Equals(actor.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(actor));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetActor());
	    }

	    public void Delete(Actor actor)
	    {
	    	this.Model.Actors.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetActor());
	    }

	    public void Update(Actor actor)
	    {
	    	this.Model.Actors.Where(p => p.Id == View.Id)
	    		.Set(p => p.Honorific, View.Honorific)
	    		.Set(p => p.FirstName, View.FirstName)
	    		.Set(p => p.MiddleName, View.MiddleName)
	    		.Set(p => p.LastName, View.LastName)
	    		.Set(p => p.PhoneNumber, View.PhoneNumber)
	    		.Set(p => p.Email, View.Email)
	    		.Set(p => p.Id, View.Id).Update();
	    }

	    public List<Database.Actor> Find(Predicate<Database.Actor> query)
	    {
	    	List<Actor> pocos = new List<Actor>();
	    	foreach(Actor poco in this.Model.Actors)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Actor GetActor()
	    {
	    	Actor poco = new Actor();
	    	poco.Honorific = this.View.Honorific;
	    	poco.FirstName = this.View.FirstName;
	    	poco.MiddleName = this.View.MiddleName;
	    	poco.LastName = this.View.LastName;
	    	poco.PhoneNumber = this.View.PhoneNumber;
	    	poco.Email = this.View.Email;
	    	poco.Id = this.View.Id;
	    	return poco;
	    }
	}

	public partial class Consultant_ContactController : Controller
	{
	    public IConsultant_ContactView View{ get; private set; }

	    public Consultant_ContactController(IConsultant_ContactView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Consultant_Contacts where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetConsultant_Contact()));
	    }

	    public static void Insert(Consultant_Contact consultant_contact,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Consultant_Contacts where poco.Id.Equals(consultant_contact.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(consultant_contact));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetConsultant_Contact());
	    }

	    public void Delete(Consultant_Contact consultant_contact)
	    {
	    	this.Model.Consultant_Contacts.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetConsultant_Contact());
	    }

	    public void Update(Consultant_Contact consultant_contact)
	    {
	    	this.Model.Consultant_Contacts.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Consultant_Id, View.Consultant_Id)
	    		.Set(p => p.Actor_Id, View.Actor_Id).Update();
	    }

	    public List<Database.Consultant_Contact> Find(Predicate<Database.Consultant_Contact> query)
	    {
	    	List<Consultant_Contact> pocos = new List<Consultant_Contact>();
	    	foreach(Consultant_Contact poco in this.Model.Consultant_Contacts)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Consultant_Contact GetConsultant_Contact()
	    {
	    	Consultant_Contact poco = new Consultant_Contact();
	    	poco.Id = this.View.Id;
	    	poco.Consultant_Id = this.View.Consultant_Id;
	    	poco.Actor_Id = this.View.Actor_Id;
	    	return poco;
	    }
	}

	public partial class ConsultantController : Controller
	{
	    public IConsultantView View{ get; private set; }

	    public ConsultantController(IConsultantView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Consultants where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetConsultant()));
	    }

	    public static void Insert(Consultant consultant,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Consultants where poco.Id.Equals(consultant.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(consultant));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetConsultant());
	    }

	    public void Delete(Consultant consultant)
	    {
	    	this.Model.Consultants.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetConsultant());
	    }

	    public void Update(Consultant consultant)
	    {
	    	this.Model.Consultants.Where(p => p.Id == View.Id)
	    		.Set(p => p.Name, View.Name)
	    		.Set(p => p.Address1, View.Address1)
	    		.Set(p => p.Address2, View.Address2)
	    		.Set(p => p.City, View.City)
	    		.Set(p => p.State, View.State)
	    		.Set(p => p.Zip, View.Zip)
	    		.Set(p => p.PhoneNumber, View.PhoneNumber)
	    		.Set(p => p.Email, View.Email)
	    		.Set(p => p.Id, View.Id).Update();
	    }

	    public List<Database.Consultant> Find(Predicate<Database.Consultant> query)
	    {
	    	List<Consultant> pocos = new List<Consultant>();
	    	foreach(Consultant poco in this.Model.Consultants)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Consultant GetConsultant()
	    {
	    	Consultant poco = new Consultant();
	    	poco.Name = this.View.Name;
	    	poco.Address1 = this.View.Address1;
	    	poco.Address2 = this.View.Address2;
	    	poco.City = this.View.City;
	    	poco.State = this.View.State;
	    	poco.Zip = this.View.Zip;
	    	poco.PhoneNumber = this.View.PhoneNumber;
	    	poco.Email = this.View.Email;
	    	poco.Id = this.View.Id;
	    	return poco;
	    }
	}

	public partial class DeliverableController : Controller
	{
	    public IDeliverableView View{ get; private set; }

	    public DeliverableController(IDeliverableView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Deliverables where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetDeliverable()));
	    }

	    public static void Insert(Deliverable deliverable,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Deliverables where poco.Id.Equals(deliverable.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(deliverable));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetDeliverable());
	    }

	    public void Delete(Deliverable deliverable)
	    {
	    	this.Model.Deliverables.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetDeliverable());
	    }

	    public void Update(Deliverable deliverable)
	    {
	    	this.Model.Deliverables.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Name, View.Name)
	    		.Set(p => p.DueDate, View.DueDate)
	    		.Set(p => p.IsComplete, View.IsComplete)
	    		.Set(p => p.ProjectedCost, View.ProjectedCost)
	    		.Set(p => p.ActualCost, View.ActualCost)
	    		.Set(p => p.Description, View.Description)
	    		.Set(p => p.StartDate, View.StartDate)
	    		.Set(p => p.ProjectedFinishDate, View.ProjectedFinishDate)
	    		.Set(p => p.ActualFinishDate, View.ActualFinishDate)
	    		.Set(p => p.File, View.File)
	    		.Set(p => p.CreationDate, View.CreationDate).Update();
	    }

	    public List<Database.Deliverable> Find(Predicate<Database.Deliverable> query)
	    {
	    	List<Deliverable> pocos = new List<Deliverable>();
	    	foreach(Deliverable poco in this.Model.Deliverables)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Deliverable GetDeliverable()
	    {
	    	Deliverable poco = new Deliverable();
	    	poco.Id = this.View.Id;
	    	poco.Name = this.View.Name;
	    	poco.DueDate = this.View.DueDate;
	    	poco.IsComplete = this.View.IsComplete;
	    	poco.ProjectedCost = this.View.ProjectedCost;
	    	poco.ActualCost = this.View.ActualCost;
	    	poco.Description = this.View.Description;
	    	poco.StartDate = this.View.StartDate;
	    	poco.ProjectedFinishDate = this.View.ProjectedFinishDate;
	    	poco.ActualFinishDate = this.View.ActualFinishDate;
	    	poco.File = this.View.File;
	    	poco.CreationDate = this.View.CreationDate;
	    	return poco;
	    }
	}

	public partial class EmployeeController : Controller
	{
	    public IEmployeeView View{ get; private set; }

	    public EmployeeController(IEmployeeView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Employees where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetEmployee()));
	    }

	    public static void Insert(Employee employee,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Employees where poco.Id.Equals(employee.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(employee));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetEmployee());
	    }

	    public void Delete(Employee employee)
	    {
	    	this.Model.Employees.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetEmployee());
	    }

	    public void Update(Employee employee)
	    {
	    	this.Model.Employees.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.EmployeeId, View.EmployeeId)
	    		.Set(p => p.Actor_Id, View.Actor_Id)
	    		.Set(p => p.Unit_Id, View.Unit_Id).Update();
	    }

	    public List<Database.Employee> Find(Predicate<Database.Employee> query)
	    {
	    	List<Employee> pocos = new List<Employee>();
	    	foreach(Employee poco in this.Model.Employees)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Employee GetEmployee()
	    {
	    	Employee poco = new Employee();
	    	poco.Id = this.View.Id;
	    	poco.EmployeeId = this.View.EmployeeId;
	    	poco.Actor_Id = this.View.Actor_Id;
	    	poco.Unit_Id = this.View.Unit_Id;
	    	return poco;
	    }
	}

	public partial class EncumberanceController : Controller
	{
	    public IEncumberanceView View{ get; private set; }

	    public EncumberanceController(IEncumberanceView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Encumberances where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetEncumberance()));
	    }

	    public static void Insert(Encumberance encumberance,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Encumberances where poco.Id.Equals(encumberance.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(encumberance));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetEncumberance());
	    }

	    public void Delete(Encumberance encumberance)
	    {
	    	this.Model.Encumberances.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetEncumberance());
	    }

	    public void Update(Encumberance encumberance)
	    {
	    	this.Model.Encumberances.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Project_Id, View.Project_Id)
	    		.Set(p => p.Consultant_Id, View.Consultant_Id)
	    		.Set(p => p.SOW_Id, View.SOW_Id)
	    		.Set(p => p.TaskOrder, View.TaskOrder)
	    		.Set(p => p.ObjCategory, View.ObjCategory)
	    		.Set(p => p.Object, View.Object)
	    		.Set(p => p.Percentage, View.Percentage)
	    		.Set(p => p.Amount, View.Amount)
	    		.Set(p => p.AcesNo, View.AcesNo)
	    		.Set(p => p.EcapsDocId, View.EcapsDocId)
	    		.Set(p => p.File, View.File).Update();
	    }

	    public List<Database.Encumberance> Find(Predicate<Database.Encumberance> query)
	    {
	    	List<Encumberance> pocos = new List<Encumberance>();
	    	foreach(Encumberance poco in this.Model.Encumberances)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Encumberance GetEncumberance()
	    {
	    	Encumberance poco = new Encumberance();
	    	poco.Id = this.View.Id;
	    	poco.Project_Id = this.View.Project_Id;
	    	poco.Consultant_Id = this.View.Consultant_Id;
	    	poco.SOW_Id = this.View.SOW_Id;
	    	poco.TaskOrder = this.View.TaskOrder;
	    	poco.ObjCategory = this.View.ObjCategory;
	    	poco.Object = this.View.Object;
	    	poco.Percentage = this.View.Percentage;
	    	poco.Amount = this.View.Amount;
	    	poco.AcesNo = this.View.AcesNo;
	    	poco.EcapsDocId = this.View.EcapsDocId;
	    	poco.File = this.View.File;
	    	return poco;
	    }
	}

	public partial class InvoiceController : Controller
	{
	    public IInvoiceView View{ get; private set; }

	    public InvoiceController(IInvoiceView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Invoices where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetInvoice()));
	    }

	    public static void Insert(Invoice invoice,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Invoices where poco.Id.Equals(invoice.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(invoice));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetInvoice());
	    }

	    public void Delete(Invoice invoice)
	    {
	    	this.Model.Invoices.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetInvoice());
	    }

	    public void Update(Invoice invoice)
	    {
	    	this.Model.Invoices.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Project_Id, View.Project_Id)
	    		.Set(p => p.InvoiceNumber, View.InvoiceNumber)
	    		.Set(p => p.FromDate, View.FromDate)
	    		.Set(p => p.ToDate, View.ToDate)
	    		.Set(p => p.ReceiptDate, View.ReceiptDate)
	    		.Set(p => p.ApprovalDate, View.ApprovalDate)
	    		.Set(p => p.DispersalDate, View.DispersalDate)
	    		.Set(p => p.ContractNumber, View.ContractNumber)
	    		.Set(p => p.IsPaid, View.IsPaid)
	    		.Set(p => p.File, View.File)
	    		.Set(p => p.Consultant_Id, View.Consultant_Id).Update();
	    }

	    public List<Database.Invoice> Find(Predicate<Database.Invoice> query)
	    {
	    	List<Invoice> pocos = new List<Invoice>();
	    	foreach(Invoice poco in this.Model.Invoices)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Invoice GetInvoice()
	    {
	    	Invoice poco = new Invoice();
	    	poco.Id = this.View.Id;
	    	poco.Project_Id = this.View.Project_Id;
	    	poco.InvoiceNumber = this.View.InvoiceNumber;
	    	poco.FromDate = this.View.FromDate;
	    	poco.ToDate = this.View.ToDate;
	    	poco.ReceiptDate = this.View.ReceiptDate;
	    	poco.ApprovalDate = this.View.ApprovalDate;
	    	poco.DispersalDate = this.View.DispersalDate;
	    	poco.ContractNumber = this.View.ContractNumber;
	    	poco.IsPaid = this.View.IsPaid;
	    	poco.File = this.View.File;
	    	poco.Consultant_Id = this.View.Consultant_Id;
	    	return poco;
	    }
	}

	public partial class NTPController : Controller
	{
	    public INTPView View{ get; private set; }

	    public NTPController(INTPView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.NTPs where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetNTP()));
	    }

	    public static void Insert(NTP ntp,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.NTPs where poco.Id.Equals(ntp.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(ntp));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetNTP());
	    }

	    public void Delete(NTP ntp)
	    {
	    	this.Model.NTPs.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetNTP());
	    }

	    public void Update(NTP ntp)
	    {
	    	this.Model.NTPs.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.SOW_Id, View.SOW_Id)
	    		.Set(p => p.File, View.File)
	    		.Set(p => p.DispersalDate, View.DispersalDate)
	    		.Set(p => p.CreationDate, View.CreationDate).Update();
	    }

	    public List<Database.NTP> Find(Predicate<Database.NTP> query)
	    {
	    	List<NTP> pocos = new List<NTP>();
	    	foreach(NTP poco in this.Model.NTPs)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    NTP GetNTP()
	    {
	    	NTP poco = new NTP();
	    	poco.Id = this.View.Id;
	    	poco.SOW_Id = this.View.SOW_Id;
	    	poco.File = this.View.File;
	    	poco.DispersalDate = this.View.DispersalDate;
	    	poco.CreationDate = this.View.CreationDate;
	    	return poco;
	    }
	}

	public partial class Project_ActorController : Controller
	{
	    public IProject_ActorView View{ get; private set; }

	    public Project_ActorController(IProject_ActorView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Project_Actors where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetProject_Actor()));
	    }

	    public static void Insert(Project_Actor project_actor,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Project_Actors where poco.Id.Equals(project_actor.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(project_actor));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetProject_Actor());
	    }

	    public void Delete(Project_Actor project_actor)
	    {
	    	this.Model.Project_Actors.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetProject_Actor());
	    }

	    public void Update(Project_Actor project_actor)
	    {
	    	this.Model.Project_Actors.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Project_Id, View.Project_Id)
	    		.Set(p => p.Actor_Id, View.Actor_Id)
	    		.Set(p => p.Role_Id, View.Role_Id).Update();
	    }

	    public List<Database.Project_Actor> Find(Predicate<Database.Project_Actor> query)
	    {
	    	List<Project_Actor> pocos = new List<Project_Actor>();
	    	foreach(Project_Actor poco in this.Model.Project_Actors)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Project_Actor GetProject_Actor()
	    {
	    	Project_Actor poco = new Project_Actor();
	    	poco.Id = this.View.Id;
	    	poco.Project_Id = this.View.Project_Id;
	    	poco.Actor_Id = this.View.Actor_Id;
	    	poco.Role_Id = this.View.Role_Id;
	    	return poco;
	    }
	}

	public partial class Project_DeliverableController : Controller
	{
	    public IProject_DeliverableView View{ get; private set; }

	    public Project_DeliverableController(IProject_DeliverableView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Project_Deliverables where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetProject_Deliverable()));
	    }

	    public static void Insert(Project_Deliverable project_deliverable,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Project_Deliverables where poco.Id.Equals(project_deliverable.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(project_deliverable));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetProject_Deliverable());
	    }

	    public void Delete(Project_Deliverable project_deliverable)
	    {
	    	this.Model.Project_Deliverables.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetProject_Deliverable());
	    }

	    public void Update(Project_Deliverable project_deliverable)
	    {
	    	this.Model.Project_Deliverables.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Project_Id, View.Project_Id)
	    		.Set(p => p.Deliverable_Id, View.Deliverable_Id).Update();
	    }

	    public List<Database.Project_Deliverable> Find(Predicate<Database.Project_Deliverable> query)
	    {
	    	List<Project_Deliverable> pocos = new List<Project_Deliverable>();
	    	foreach(Project_Deliverable poco in this.Model.Project_Deliverables)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Project_Deliverable GetProject_Deliverable()
	    {
	    	Project_Deliverable poco = new Project_Deliverable();
	    	poco.Id = this.View.Id;
	    	poco.Project_Id = this.View.Project_Id;
	    	poco.Deliverable_Id = this.View.Deliverable_Id;
	    	return poco;
	    }
	}

	public partial class Project_FinancialController : Controller
	{
	    public IProject_FinancialView View{ get; private set; }

	    public Project_FinancialController(IProject_FinancialView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Project_Financials where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetProject_Financial()));
	    }

	    public static void Insert(Project_Financial project_financial,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Project_Financials where poco.Id.Equals(project_financial.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(project_financial));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetProject_Financial());
	    }

	    public void Delete(Project_Financial project_financial)
	    {
	    	this.Model.Project_Financials.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetProject_Financial());
	    }

	    public void Update(Project_Financial project_financial)
	    {
	    	this.Model.Project_Financials.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Project_Id, View.Project_Id)
	    		.Set(p => p.PCA, View.PCA)
	    		.Set(p => p.ExpirationDate, View.ExpirationDate).Update();
	    }

	    public List<Database.Project_Financial> Find(Predicate<Database.Project_Financial> query)
	    {
	    	List<Project_Financial> pocos = new List<Project_Financial>();
	    	foreach(Project_Financial poco in this.Model.Project_Financials)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Project_Financial GetProject_Financial()
	    {
	    	Project_Financial poco = new Project_Financial();
	    	poco.Id = this.View.Id;
	    	poco.Project_Id = this.View.Project_Id;
	    	poco.PCA = this.View.PCA;
	    	poco.ExpirationDate = this.View.ExpirationDate;
	    	return poco;
	    }
	}

	public partial class Project_NoteController : Controller
	{
	    public IProject_NoteView View{ get; private set; }

	    public Project_NoteController(IProject_NoteView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Project_Notes where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetProject_Note()));
	    }

	    public static void Insert(Project_Note project_note,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Project_Notes where poco.Id.Equals(project_note.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(project_note));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetProject_Note());
	    }

	    public void Delete(Project_Note project_note)
	    {
	    	this.Model.Project_Notes.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetProject_Note());
	    }

	    public void Update(Project_Note project_note)
	    {
	    	this.Model.Project_Notes.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Project_Id, View.Project_Id)
	    		.Set(p => p.User_Id, View.User_Id)
	    		.Set(p => p.Note, View.Note)
	    		.Set(p => p.CreationDate, View.CreationDate).Update();
	    }

	    public List<Database.Project_Note> Find(Predicate<Database.Project_Note> query)
	    {
	    	List<Project_Note> pocos = new List<Project_Note>();
	    	foreach(Project_Note poco in this.Model.Project_Notes)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Project_Note GetProject_Note()
	    {
	    	Project_Note poco = new Project_Note();
	    	poco.Id = this.View.Id;
	    	poco.Project_Id = this.View.Project_Id;
	    	poco.User_Id = this.View.User_Id;
	    	poco.Note = this.View.Note;
	    	poco.CreationDate = this.View.CreationDate;
	    	return poco;
	    }
	}

	public partial class ProjectController : Controller
	{
	    public IProjectView View{ get; private set; }

	    public ProjectController(IProjectView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Projects where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetProject()));
	    }

	    public static void Insert(Project project,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Projects where poco.Id.Equals(project.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(project));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetProject());
	    }

	    public void Delete(Project project)
	    {
	    	this.Model.Projects.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetProject());
	    }

	    public void Update(Project project)
	    {
	    	this.Model.Projects.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Name, View.Name)
	    		.Set(p => p.Summary, View.Summary)
	    		.Set(p => p.SuperDistrict, View.SuperDistrict)
	    		.Set(p => p.IsComplete, View.IsComplete)
	    		.Set(p => p.ProjectId, View.ProjectId).Update();
	    }

	    public List<Database.Project> Find(Predicate<Database.Project> query)
	    {
	    	List<Project> pocos = new List<Project>();
	    	foreach(Project poco in this.Model.Projects)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Project GetProject()
	    {
	    	Project poco = new Project();
	    	poco.Id = this.View.Id;
	    	poco.Name = this.View.Name;
	    	poco.Summary = this.View.Summary;
	    	poco.SuperDistrict = this.View.SuperDistrict;
	    	poco.IsComplete = this.View.IsComplete;
	    	poco.ProjectId = this.View.ProjectId;
	    	return poco;
	    }
	}

	public partial class RoleController : Controller
	{
	    public IRoleView View{ get; private set; }

	    public RoleController(IRoleView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Roles where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetRole()));
	    }

	    public static void Insert(Role role,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Roles where poco.Id.Equals(role.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(role));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetRole());
	    }

	    public void Delete(Role role)
	    {
	    	this.Model.Roles.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetRole());
	    }

	    public void Update(Role role)
	    {
	    	this.Model.Roles.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Name, View.Name)
	    		.Set(p => p.Description, View.Description).Update();
	    }

	    public List<Database.Role> Find(Predicate<Database.Role> query)
	    {
	    	List<Role> pocos = new List<Role>();
	    	foreach(Role poco in this.Model.Roles)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Role GetRole()
	    {
	    	Role poco = new Role();
	    	poco.Id = this.View.Id;
	    	poco.Name = this.View.Name;
	    	poco.Description = this.View.Description;
	    	return poco;
	    }
	}

	public partial class SOW_TaskController : Controller
	{
	    public ISOW_TaskView View{ get; private set; }

	    public SOW_TaskController(ISOW_TaskView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.SOW_Tasks where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetSOW_Task()));
	    }

	    public static void Insert(SOW_Task sow_task,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.SOW_Tasks where poco.Id.Equals(sow_task.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(sow_task));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetSOW_Task());
	    }

	    public void Delete(SOW_Task sow_task)
	    {
	    	this.Model.SOW_Tasks.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetSOW_Task());
	    }

	    public void Update(SOW_Task sow_task)
	    {
	    	this.Model.SOW_Tasks.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.SOW_Id, View.SOW_Id)
	    		.Set(p => p.Task_Id, View.Task_Id).Update();
	    }

	    public List<Database.SOW_Task> Find(Predicate<Database.SOW_Task> query)
	    {
	    	List<SOW_Task> pocos = new List<SOW_Task>();
	    	foreach(SOW_Task poco in this.Model.SOW_Tasks)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    SOW_Task GetSOW_Task()
	    {
	    	SOW_Task poco = new SOW_Task();
	    	poco.Id = this.View.Id;
	    	poco.SOW_Id = this.View.SOW_Id;
	    	poco.Task_Id = this.View.Task_Id;
	    	return poco;
	    }
	}

	public partial class SOWController : Controller
	{
	    public ISOWView View{ get; private set; }

	    public SOWController(ISOWView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.SOWs where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetSOW()));
	    }

	    public static void Insert(SOW sow,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.SOWs where poco.Id.Equals(sow.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(sow));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetSOW());
	    }

	    public void Delete(SOW sow)
	    {
	    	this.Model.SOWs.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetSOW());
	    }

	    public void Update(SOW sow)
	    {
	    	this.Model.SOWs.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Project_Financial_Id, View.Project_Financial_Id)
	    		.Set(p => p.Consultant_Id, View.Consultant_Id)
	    		.Set(p => p.WorkOrderNumber, View.WorkOrderNumber)
	    		.Set(p => p.NotToExceedTotal, View.NotToExceedTotal)
	    		.Set(p => p.File, View.File).Update();
	    }

	    public List<Database.SOW> Find(Predicate<Database.SOW> query)
	    {
	    	List<SOW> pocos = new List<SOW>();
	    	foreach(SOW poco in this.Model.SOWs)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    SOW GetSOW()
	    {
	    	SOW poco = new SOW();
	    	poco.Id = this.View.Id;
	    	poco.Project_Financial_Id = this.View.Project_Financial_Id;
	    	poco.Consultant_Id = this.View.Consultant_Id;
	    	poco.WorkOrderNumber = this.View.WorkOrderNumber;
	    	poco.NotToExceedTotal = this.View.NotToExceedTotal;
	    	poco.File = this.View.File;
	    	return poco;
	    }
	}

	public partial class Task_DeliverableController : Controller
	{
	    public ITask_DeliverableView View{ get; private set; }

	    public Task_DeliverableController(ITask_DeliverableView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Task_Deliverables where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetTask_Deliverable()));
	    }

	    public static void Insert(Task_Deliverable task_deliverable,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Task_Deliverables where poco.Id.Equals(task_deliverable.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(task_deliverable));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetTask_Deliverable());
	    }

	    public void Delete(Task_Deliverable task_deliverable)
	    {
	    	this.Model.Task_Deliverables.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetTask_Deliverable());
	    }

	    public void Update(Task_Deliverable task_deliverable)
	    {
	    	this.Model.Task_Deliverables.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Task_Id, View.Task_Id)
	    		.Set(p => p.Deliverable_Id, View.Deliverable_Id).Update();
	    }

	    public List<Database.Task_Deliverable> Find(Predicate<Database.Task_Deliverable> query)
	    {
	    	List<Task_Deliverable> pocos = new List<Task_Deliverable>();
	    	foreach(Task_Deliverable poco in this.Model.Task_Deliverables)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Task_Deliverable GetTask_Deliverable()
	    {
	    	Task_Deliverable poco = new Task_Deliverable();
	    	poco.Id = this.View.Id;
	    	poco.Task_Id = this.View.Task_Id;
	    	poco.Deliverable_Id = this.View.Deliverable_Id;
	    	return poco;
	    }
	}

	public partial class TaskController : Controller
	{
	    public ITaskView View{ get; private set; }

	    public TaskController(ITaskView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Tasks where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetTask()));
	    }

	    public static void Insert(Task task,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Tasks where poco.Id.Equals(task.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(task));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetTask());
	    }

	    public void Delete(Task task)
	    {
	    	this.Model.Tasks.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetTask());
	    }

	    public void Update(Task task)
	    {
	    	this.Model.Tasks.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Name, View.Name)
	    		.Set(p => p.ProjectedCost, View.ProjectedCost)
	    		.Set(p => p.ActualCost, View.ActualCost)
	    		.Set(p => p.Description, View.Description)
	    		.Set(p => p.PercComplete, View.PercComplete)
	    		.Set(p => p.IsComplete, View.IsComplete).Update();
	    }

	    public List<Database.Task> Find(Predicate<Database.Task> query)
	    {
	    	List<Task> pocos = new List<Task>();
	    	foreach(Task poco in this.Model.Tasks)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Task GetTask()
	    {
	    	Task poco = new Task();
	    	poco.Id = this.View.Id;
	    	poco.Name = this.View.Name;
	    	poco.ProjectedCost = this.View.ProjectedCost;
	    	poco.ActualCost = this.View.ActualCost;
	    	poco.Description = this.View.Description;
	    	poco.PercComplete = this.View.PercComplete;
	    	poco.IsComplete = this.View.IsComplete;
	    	return poco;
	    }
	}

	public partial class UnitController : Controller
	{
	    public IUnitView View{ get; private set; }

	    public UnitController(IUnitView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Units where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetUnit()));
	    }

	    public static void Insert(Unit unit,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Units where poco.Id.Equals(unit.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(unit));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetUnit());
	    }

	    public void Delete(Unit unit)
	    {
	    	this.Model.Units.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetUnit());
	    }

	    public void Update(Unit unit)
	    {
	    	this.Model.Units.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.UnitNumber, View.UnitNumber)
	    		.Set(p => p.SectionNumber, View.SectionNumber)
	    		.Set(p => p.Name, View.Name)
	    		.Set(p => p.DivisionNumber, View.DivisionNumber).Update();
	    }

	    public List<Database.Unit> Find(Predicate<Database.Unit> query)
	    {
	    	List<Unit> pocos = new List<Unit>();
	    	foreach(Unit poco in this.Model.Units)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    Unit GetUnit()
	    {
	    	Unit poco = new Unit();
	    	poco.Id = this.View.Id;
	    	poco.UnitNumber = this.View.UnitNumber;
	    	poco.SectionNumber = this.View.SectionNumber;
	    	poco.Name = this.View.Name;
	    	poco.DivisionNumber = this.View.DivisionNumber;
	    	return poco;
	    }
	}

	public partial class UserController : Controller
	{
	    public IUserView View{ get; private set; }

	    public UserController(IUserView view, InvoiceTrackerDB model) : base(model)
	    {
	    	this.View = view;
	    }

	    public override void Insert()
	    {
	    	var p = (from poco in this.Model.Users where poco.Id.Equals(this.View.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(this.Model.InsertWithIdentity(GetUser()));
	    }

	    public static void Insert(User user,InvoiceTrackerDB model)
	    {
	    	var p = (from poco in model.Users where poco.Id.Equals(user.Id) select poco).FirstOrDefault();
	    	if (p == null) Convert.ToInt32(model.InsertWithIdentity(user));
	    }
	    public override void Delete()
	    {
	    	this.Delete(GetUser());
	    }

	    public void Delete(User user)
	    {
	    	this.Model.Users.Where(p => p.Id == View.Id).Delete();
	    }

	    public override void Update()
	    {
	    	this.Update(GetUser());
	    }

	    public void Update(User user)
	    {
	    	this.Model.Users.Where(p => p.Id == View.Id)
	    		.Set(p => p.Id, View.Id)
	    		.Set(p => p.Actor_Id, View.Actor_Id)
	    		.Set(p => p.ComputerName, View.ComputerName)
	    		.Set(p => p.CreationDate, View.CreationDate).Update();
	    }

	    public List<Database.User> Find(Predicate<Database.User> query)
	    {
	    	List<User> pocos = new List<User>();
	    	foreach(User poco in this.Model.Users)
	    	{
	    		if(query(poco)) pocos.Add(poco);
	    	}
	    	return pocos;
	    }


	    User GetUser()
	    {
	    	User poco = new User();
	    	poco.Id = this.View.Id;
	    	poco.Actor_Id = this.View.Actor_Id;
	    	poco.ComputerName = this.View.ComputerName;
	    	poco.CreationDate = this.View.CreationDate;
	    	return poco;
	    }
	}

}

